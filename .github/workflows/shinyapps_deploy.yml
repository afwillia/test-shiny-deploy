# Workflow derived from https://github.com/r-lib/actions/tree/master/examples
# Need help debugging build failures? Start at https://github.com/r-lib/actions#where-to-find-help

name: shiny-deploy

on:
  push:
    branches:
      - main

jobs:
  shiny-deploy:
    runs-on: ubuntu-latest
    # This image seems to be based on rocker/r-ver which in turn is based on debian
    container: rocker/rstudio:latest
    env:
      # This should not be necessary for installing from public repo's however remotes::install_github() fails without it.
      GITHUB_PAT: ${{ secrets.GITHUB_TOKEN }}
      
    steps:
      - name: Install System Dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y python3.10-venv pip curl
          
      - name: Install venv
        run: |
          python3.10 -m venv .venv
          
      - name: Install poetry
        run: curl -sSL https://install.python-poetry.org | .venv/bin/python3.10 -
          
      - name: Install schematic
        shell: bash
        run: |
          source .venv/bin/activate
          git clone --single-branch --branch develop https://github.com/sage-bionetworks/schematic
          cd schematic
          poetry config virtualenvs.create false
          poetry install

      - uses: actions/checkout@v2
      - uses: r-lib/actions/setup-pandoc@v2
      
      - name: Authorize and deploy app
        shell: Rscript {0}
        run: |
          install.packages(c("rsconnect", "shiny", "reticulate"), repos="https://packagemanager.rstudio.com/all/__linux__/jammy/latest")
        
          repo <- Sys.getenv("GITHUB_REPOSITORY")
          appName <- "afw-test-shiny-py"
          
          rsConnectUser <- "${{ secrets.RSCONNECT_USER }}"
          rsConnectToken <- "${{ secrets.RSCONNECT_TOKEN }}"
          rsConnectSecret <- "${{ secrets.RSCONNECT_SECRET }}"
          
           message(sprintf("Deploying to %s instance.", appName))
          rsconnect::setAccountInfo(rsConnectUser, rsConnectToken, rsConnectSecret)
          rsconnect::deployApp(appName = appName)
          rsconnect::configureApp(appName = appName, size = "xxxlarge", logLevel = "verbose")
